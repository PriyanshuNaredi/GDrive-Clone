<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/(auth)/layout.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/(auth)/layout.md" />
              <option name="updatedContent" value="# (auth)/layout.md&#10;&#10;This file is a placeholder for documentation or description of the authentication layout in the application. You can use this file to describe the structure, purpose, and any special behaviors of the authentication layout (such as shared UI, context providers, or route protection for sign-in and sign-up pages).&#10;&#10;---&#10;&#10;## Example Content&#10;- Overview of the authentication layout&#10;- Shared components or providers used&#10;- How authentication state is managed&#10;- Any custom hooks or utilities used in this layout&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/(root)/page.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/(root)/page.md" />
              <option name="updatedContent" value="# (root)/page.tsx&#10;&#10;This file is the main dashboard page for the root route of the application. It is a React Server Component that displays the user's storage usage, file type summaries, and a list of recently uploaded files.&#10;&#10;## Main Features&#10;- **Chart**: Uses the `Chart` component to visualize the percentage of storage used.&#10;- **File Type Summaries**: Shows a summary card for each file type (image, document, video, audio, other) with the total size and latest upload date.&#10;- **Recent Files**: Lists the most recently uploaded files with their details and actions.&#10;&#10;## Hooks and Functions Used&#10;- **getFiles**: Fetches the latest files for the user.&#10;- **getTotalSize**: Retrieves the total storage used and breakdown by file type.&#10;- **convertFileSize**: Converts file sizes to a human-readable format.&#10;- **getUsageSummary**: Processes the total space data into a summary for display.&#10;&#10;## Components Used&#10;- **Chart**: Displays a radial bar chart of storage usage.&#10;- **FormattedDateTime**: Formats and displays dates.&#10;- **Thumbnail**: Shows a preview or icon for each file.&#10;- **ActionDropdown**: Provides actions (rename, delete, share) for each file.&#10;- **Separator**: UI separator for summary cards.&#10;&#10;## Data Flow&#10;1. Fetches files and storage usage in parallel.&#10;2. Renders the storage chart and file type summaries.&#10;3. Displays a list of recent files with actions.&#10;&#10;---&#10;&#10;# (root)/page.md&#10;&#10;This file is a placeholder for the documentation or description of the root dashboard page. You can add details about the dashboard's purpose, features, and usage here.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ActionDropdown.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ActionDropdown.md" />
              <option name="updatedContent" value="# ActionDropdown.tsx&#10;&#10;This file contains the `ActionDropdown` component, which provides a dropdown menu for file actions such as renaming, deleting, and sharing files. It is used in the file list and recent files sections to allow users to manage their files directly from the UI.&#10;&#10;## Main Features&#10;- **Dropdown Menu**: Displays a menu with actions (rename, delete, share) for each file.&#10;- **Action Handlers**: Integrates with file actions (from `file.action.ts`) to perform operations like renaming or deleting files.&#10;- **Modal Integration**: Opens modals for actions that require user input (e.g., renaming a file or sharing with users).&#10;- **UI Feedback**: Provides feedback to the user after actions are performed (e.g., success or error messages).&#10;&#10;## Props&#10;- `file` (Models.Document): The file object for which actions are available.&#10;&#10;## Hooks and Functions Used&#10;- **useToast**: Displays toast notifications for action results.&#10;- **useState, useCallback**: Manages modal state and action handlers.&#10;&#10;## Usage&#10;Used in file lists and recent files to provide quick access to file management actions.&#10;&#10;---&#10;&#10;# ActionsModalContents.tsx&#10;&#10;This file contains the `ActionsModalContents` component, which renders the contents of modals for file actions such as renaming or sharing a file. It is used within modals triggered by the `ActionDropdown` component.&#10;&#10;## Main Features&#10;- **Dynamic Content**: Renders different forms or content based on the action (rename, share, etc.).&#10;- **Form Handling**: Handles form submission for renaming or sharing files.&#10;- **Validation**: Validates user input before performing actions.&#10;&#10;## Props&#10;- `action` (string): The action type (e.g., 'rename', 'share').&#10;- `file` (Models.Document): The file being acted upon.&#10;- `onClose` (function): Callback to close the modal.&#10;&#10;## Hooks and Functions Used&#10;- **useState, useCallback**: Manages form state and submission.&#10;- **File Actions**: Calls functions from `file.action.ts` to perform the requested action.&#10;&#10;## Usage&#10;Used inside modals opened from the `ActionDropdown` for file management actions.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/AuthForm.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/AuthForm.md" />
              <option name="updatedContent" value="# AuthForm.tsx&#10;&#10;This file contains the `AuthForm` component, which provides the user interface and logic for authentication forms such as sign-in and sign-up. It is used on authentication pages to handle user credentials and authentication flows.&#10;&#10;## Main Features&#10;- **Form Fields**: Renders input fields for email, password, and other required authentication data.&#10;- **Validation**: Validates user input before submission.&#10;- **Submission Handling**: Handles form submission and calls authentication actions.&#10;- **Error Handling**: Displays error messages for invalid credentials or failed authentication.&#10;- **Loading State**: Shows loading indicators during authentication requests.&#10;&#10;## Props&#10;- `type` (string): Specifies the form type (e.g., 'sign-in', 'sign-up').&#10;&#10;## Hooks and Functions Used&#10;- **useState, useCallback**: Manages form state and submission logic.&#10;- **Authentication Actions**: Calls functions from user actions to authenticate users.&#10;&#10;## Usage&#10;Used on sign-in and sign-up pages to provide authentication functionality.&#10;&#10;---&#10;&#10;# Card.tsx&#10;&#10;This file contains the `Card` component, a reusable UI component for displaying content within a styled card layout. It is used throughout the application for grouping related content, such as file summaries, charts, and forms.&#10;&#10;## Main Features&#10;- **Card Layout**: Provides a consistent card UI with optional header, content, and footer sections.&#10;- **Customizable**: Accepts children and optional props for flexible content rendering.&#10;- **Styling**: Uses Tailwind CSS or custom styles for appearance.&#10;&#10;## Props&#10;- `children` (ReactNode): The content to display inside the card.&#10;- `className` (string, optional): Additional CSS classes for custom styling.&#10;&#10;## Usage&#10;Used to wrap content in a visually distinct card, such as on the dashboard or in modals.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/Chart.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/Chart.md" />
              <option name="updatedContent" value="# Chart.tsx&#10;&#10;This file contains the `Chart` component, a client-side React component for visualizing storage usage in a radial bar chart format. It is used to display the percentage of storage used by the user in a visually appealing way.&#10;&#10;## Main Features&#10;- **RadialBarChart**: Uses the `recharts` library to render a radial bar chart showing the percentage of storage used.&#10;- **Dynamic Label**: Displays the percentage of space used and a label inside the chart.&#10;- **Card Layout**: Wraps the chart in a styled card with a header showing the available storage in a human-readable format.&#10;&#10;## Hooks and Functions Used&#10;- **calculatePercentage**: Calculates the percentage of storage used based on the input value.&#10;- **convertFileSize**: Converts the used storage value to a human-readable string (e.g., MB, GB).&#10;&#10;## Components Used&#10;- **Card, CardContent, CardHeader, CardTitle, CardDescription**: UI components for layout and styling.&#10;- **ChartContainer**: Provides configuration and layout for the chart.&#10;&#10;## Props&#10;- `used` (number): The amount of storage used (in bytes).&#10;&#10;## Usage&#10;This component is typically used on the dashboard page to give users a quick overview of their storage consumption.&#10;&#10;---&#10;&#10;# file.action.ts&#10;&#10;This file contains server-side actions for managing files in the application, including uploading, renaming, sharing, deleting, and retrieving files, as well as calculating total storage usage.&#10;&#10;## Main Functions&#10;- **uploadFile**: Handles file upload to Appwrite storage and creates a corresponding document in the database.&#10;- **renameFile**: Renames a file document in the database.&#10;- **updateFileUsers**: Updates the list of users who have access to a file (for sharing functionality).&#10;- **deleteFile**: Deletes a file document and the associated file from storage.&#10;- **getFiles**: Retrieves files for the current user, with support for filtering, searching, sorting, and limiting results.&#10;- **getTotalSize**: Calculates the total storage used by the user, broken down by file type, and returns usage statistics.&#10;&#10;## Helper Functions&#10;- **handelError**: Logs and throws errors with a custom message.&#10;- **createQueries**: Constructs Appwrite database queries based on user, file types, search text, sort order, and limit.&#10;&#10;## Hooks and Utilities Used&#10;- **createAdminClient**: Initializes Appwrite client for server-side operations.&#10;- **getCurrentUser**: Retrieves the currently authenticated user.&#10;- **constructFileUrl, getFileType, parseStringify**: Utility functions for file metadata and formatting.&#10;- **revalidatePath**: Triggers Next.js cache revalidation for a given path after mutations.&#10;&#10;## Usage&#10;These actions are used throughout the application for file management features, including uploading, renaming, sharing, deleting, and displaying files and storage statistics.&#10;&#10;## Error Handling&#10;All actions use `handelError` to log and throw errors, ensuring consistent error reporting and handling.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/FormattedDateTime.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/FormattedDateTime.md" />
              <option name="updatedContent" value="# FormattedDateTime.tsx&#10;&#10;## Purpose&#10;Displays a formatted date and time string using utility functions for formatting and styling.&#10;&#10;## Hooks Used&#10;- **None**: This component is stateless and does not use any React hooks.&#10;&#10;## Functions&#10;- **FormattedDateTime (component)**: Accepts a `date` string and optional `className`, formats the date using `formatDateTime`, and renders it with styling.&#10;&#10;## Important Imports&#10;- `cn` from utils: Utility for conditional class names.&#10;- `formatDateTime` from utils: Formats the date string for display.&#10;&#10;## Props&#10;- `date`: The date string to format and display.&#10;- `className`: Optional CSS class for styling.&#10;&#10;## Usage&#10;Used in file cards and modal components to display formatted creation or update dates." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/Header.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/Header.md" />
              <option name="updatedContent" value="# Header.tsx&#10;&#10;## Purpose&#10;Renders the top header for authenticated pages, including a search bar, file uploader, and sign-out button.&#10;&#10;## Hooks Used&#10;- **None**: This component is stateless and does not use any React hooks.&#10;&#10;## Functions&#10;- **Header (component)**: Accepts `userId` and `accountId` props, renders search, file upload, and sign-out functionality.&#10;- **signOutUser** (imported): Handles user sign-out when the button is clicked.&#10;&#10;## Important Imports&#10;- `Search`: Search bar component for files.&#10;- `FileUploader`: Component for uploading files.&#10;- `Button`: UI button for sign-out.&#10;- `Image`: Displays the logout icon.&#10;&#10;## Props&#10;- `userId`: The user's unique ID.&#10;- `accountId`: The user's account ID.&#10;&#10;## Usage&#10;Used in the main layout to provide navigation, file upload, and sign-out actions for authenticated users." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/MobileNavigation.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/MobileNavigation.md" />
              <option name="updatedContent" value="# MobileNavigation.tsx&#10;&#10;## Purpose&#10;Provides a mobile-friendly navigation header, including user info, navigation links, file upload, and logout actions.&#10;&#10;## Hooks Used&#10;- **useState**: Manages the open/close state of the navigation sheet.&#10;- **usePathname**: Gets the current route for navigation context.&#10;&#10;## Functions&#10;- **MobileNavigation (component)**: Accepts user props and renders navigation, file upload, and logout functionality.&#10;- **signOutUser** (imported): Handles user sign-out when the button is clicked.&#10;&#10;## Important Imports&#10;- `Sheet`, `SheetContent`, `SheetTrigger`, `SheetTitle`: UI components for mobile navigation drawer.&#10;- `FileUploader`: Component for uploading files.&#10;- `Button`: UI button for logout.&#10;- `Image`: Displays logo and icons.&#10;- `navItems`: List of navigation items.&#10;&#10;## Props&#10;- `$id`: User's unique ID.&#10;- `accountId`: User's account ID.&#10;- `fullName`: User's full name.&#10;- `avatar`: User's avatar URL.&#10;- `email`: User's email address.&#10;&#10;## Usage&#10;Used in the main layout for mobile devices to provide navigation, file upload, and logout actions for authenticated users." />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>